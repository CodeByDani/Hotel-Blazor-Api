@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"
@using Business.Repository.IRepository
@using Models
@inject IAmenityRepository AmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 mr-3 text-right">@Title امکانات هتل</h3>

    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                @* First Keep On Submit then change to onValidSubmit *@
                <EditForm Model="@HotelAmenityModel" OnValidSubmit="HandleHotelAmenityCreate">
                    <DataAnnotationsValidator />
                    @*Show validation summary <ValidationSummary/>*@
                    <div class="form-group text-right">
                        <label>نام</label>
                        <InputText @bind-Value="HotelAmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group text-right">
                        <label>توضیحات</label>
                        <InputTextArea @bind-Value="HotelAmenityModel.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>HotelAmenityModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group text-right">
                        <label>زمان‌بندی</label>
                        <InputText @bind-Value="HotelAmenityModel.Timming" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Timming"></ValidationMessage>
                    </div>
                    <div class="form-group text-right">
                        <label>استایل آیکون</label>
                        <InputText @bind-Value="HotelAmenityModel.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.IconStyle"></ValidationMessage>
                    </div>

                    <div class="form-group text-right">
                        <button class="btn btn-primary"> @Title امکانات</button>
                        <NavLink href="@($"hotel-amenity")" class="btn btn-secondary">بازگشت به فهرست</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code
{
    [Parameter]
    public int? Id { get; set; }
    //instantiate right away
    internal HotelAmenityDTO HotelAmenityModel { get; set; } = new HotelAmenityDTO();

    internal string Title { get; set; } = "ایجاد";

    internal bool IsProcessingStart { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //we work with update
            Title = "بروزرسانی";

            HotelAmenityModel = await AmenityRepository.GetHotelAmenity(Id.Value);
        }
        else
        {
            HotelAmenityModel = new HotelAmenityDTO();
        }
    }

    internal async Task HandleHotelAmenityCreate()
    {
        try
        {
            IsProcessingStart = true;

            if (HotelAmenityModel.Id != 0 && Title == "بروزرسانی")
            {
                var amenityDetailsByName = await AmenityRepository.IsSameNameAmenityAlreadyExists(HotelAmenityModel.Name);
                if (amenityDetailsByName != null && amenityDetailsByName.Id != HotelAmenityModel.Id)
                {
                    await jsRuntime.ToastrError("این امکانات هتل قبلاً وجود دارد.");
                    return;
                }
                //بروزرسانی امکانات هتل
                var updateAmenityResult = await AmenityRepository.UpdateHotelAmenity(HotelAmenityModel.Id, HotelAmenityModel);

                await jsRuntime.ToastrSuccess("امکانات هتل با موفقیت بروزرسانی شد.");
            }
            else
            {
                var amenityDetailsByName = await AmenityRepository.IsSameNameAmenityAlreadyExists(HotelAmenityModel.Name);
                if (amenityDetailsByName != null)
                {
                    await jsRuntime.ToastrError("نام امکانات هتل قبلاً وجود دارد.");
                }

                //ایجاد امکانات هتل جدید
                var createdResult = await AmenityRepository.CreateHotelAmenity(HotelAmenityModel);
                HotelAmenityModel = new HotelAmenityDTO();
                await jsRuntime.ToastrSuccess("امکانات هتل با موفقیت ایجاد شد.");
            }
            NavigationManager.NavigateTo("hotel-amenity");
            IsProcessingStart = false;

        }
        catch (Exception e)
        {
            IsProcessingStart = false;
        }
    }
}
